#!/bin/bash -x

# configure script that will fetch and build SimpleITK, then move the results
# to somewhere that R can install. It takes a long time and uses
# a substantial amount of disk space
#
# Requires git and cmake
#
export SimpleITKGit=https://github.com/SimpleITK/SimpleITK
export SITKTAG=v0.10.0

export PKGBASED=$(pwd)
echo ${PKGBASED}

## make sure we've got the correct R
[ -z "$R_HOME" ] || ( echo "Environment variable \"R_HOME\" is not set!" && exit 1)
RCALL="${R_HOME}/bin/R"
export RCALL

CC=${CC:-$(${RCALL} CMD config CC)}
CXX=${CXX:-$(${RCALL} CMD config CXX)}
CFLAGS=${CFLAGS:-$(${RCALL} CMD config CFLAGS)}
CXXFLAGS=${CXXFLAGS:-$(${RCALL} CMD config CXX1XFLAGS)}
CPPFLAGS=${CPPFLAGS:-$(${RCALL} CMD config CPPFLAGS)}
export CXX
export CC
export CXXFLAGS
export CPPFLAGS
export CFLAGS


RTESTON=${RTESTON:-OFF}
export RTESTON
## Level of parallel build
## Don't use the Ncpus option for install.packages because it
## refers to multiple packages
MAKEJ=${MAKEJ:-1}
export MAKEJ



## All the building is going to happen in an SITK folder
mkdir -p SITK
(
    cd SITK &&
    [ -d SimpleITK ] ||
      ( git clone  ${SimpleITKGit} &&
          cd SimpleITK &&
          git checkout  ${SITKTAG} ) || exit 1

    mkdir -p Build &&
    cd Build &&
    cmake \
        -DWRAP_R=ON \
        -DWRAP_LUA=OFF \
        -DWRAP_PYTHON=OFF \
        -DWRAP_TCL=OFF \
        -DWRAP_RUBY=OFF \
        -DWRAP_JAVA=OFF \
        -DWRAP_CSHARP=OFF \
        -DBUILD_EXAMPLES=OFF \
        -DBUILD_TESTING=${RTESTON} \
	${DITK_REPOSITORY} \
        ../SimpleITK/SuperBuild/ ||
    exit 1

    echo "Parallel build using -j${MAKEJ}"
    make -j${MAKEJ} &&
    # Use R to do the move to avoid system specific issues.
    ${RCALL} -f ${PKGBASED}/sitkmove.R --args SimpleITK-build/Wrapping/R/Packaging/SimpleITK/ ${PKGBASED} ||
    exit 1
)
